name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-12]
        node-version: [16, 18, 20]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Jest tests with coverage
      run: npm test -- --ci --coverage --json --outputFile=test-results.json
      continue-on-error: true
    
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results - Node ${{ matrix.node-version }} on ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f test-results.json ]; then
          node -e "
            const results = require('./test-results.json');
            const { numPassedTests, numFailedTests, numTotalTests } = results;
            console.log('✅ Passed: ' + numPassedTests);
            console.log('❌ Failed: ' + numFailedTests);
            console.log('📊 Total: ' + numTotalTests);
            console.log('⏱️ Time: ' + (results.testResults[0]?.perfStats?.runtime / 1000 || 0).toFixed(2) + 's');
          " >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          test-results.json
          coverage/
        retention-days: 30
    
    - name: Check test status
      run: npm test -- --ci
  
  integration-tests:
    name: Integration Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test MCP server
      run: node test-server.js
    
    - name: Test manifest generation
      run: node test-manifests.js
    
    - name: Validate DXT build
      run: |
        npm run build
        npm run validate
    
    - name: Test AppleScript syntax
      run: |
        for script in src/scripts/*.applescript; do
          if [ -f "$script" ]; then
            echo "Checking syntax: $script"
            osascript -c "$(cat "$script" | head -1)" 2>/dev/null || echo "Syntax check for $script"
          fi
        done
  
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check JavaScript syntax
      run: |
        for file in src/**/*.js build.js validate-dxt.js; do
          if [ -f "$file" ]; then
            node -c "$file" || exit 1
          fi
        done
    
    - name: Validate package.json
      run: |
        node -e "
          const pkg = require('./package.json');
          if (!pkg.name || !pkg.version) {
            console.error('Invalid package.json');
            process.exit(1);
          }
          console.log('✅ package.json is valid');
        "
    
    - name: Check for security vulnerabilities
      run: npm audit --audit-level=high
      continue-on-error: true
  
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, lint-and-format]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-artifacts
    
    - name: Generate summary
      run: |
        echo "# 🧪 Test Suite Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "✅ **Unit Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Unit Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.lint-and-format.result }}" == "success" ]; then
          echo "✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Code Quality**: Issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Test Artifacts**: Available for download" >> $GITHUB_STEP_SUMMARY